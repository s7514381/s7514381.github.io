
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>自由發揮 園丁Tim</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/css/site.css?v=xagqhrOijyiBYSBsbY6uIyFGcnVxiiReNK3vz42VH0E" />
    <link rel="stylesheet" href="/css/image-cover-frame.css?v=LndOvmdvYvfNGZ_Xby9XErY0d5p_LhPwLQ90eOPSTYg" />
    <link rel="stylesheet" href="/css/dynamic-form.css?v=kHNWcsTiItzqiDc_ryxKuhJWXoUb9-TTxkcO2nCvOSU" />

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="/lib/Sortable/Sortable.min.js"></script>
    <script src="/lib/vue/vuedraggable.umd.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="/js/site.js?v=7zy2lQfplQHWIvjyGwWHMPu7byB1vB5atFKLbvzX2Zs"></script>
    <script src="/js/vue-mixin.js?v=PnJgjQVcEFMQNZGeowa0p8qaidIA2zl39xp-ddfgjkw"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;

        const baseMixin = {
            mixins: [firestoreMixin, realtimeDbMixin],
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    authInfo: {
                        ready: false,
                        user: null,
                    },
                    visitId: null,
                    connection: {
                        name: 'connections',
                        users: [],
                        ready: false,
                    },
                }
            },
            beforeCreate() {
                thisApp = this;
            },
            async created() {
                thisApp.visitId = thisApp.newGuid();
                thisApp.setHeadTitle(thisApp.pageTitle)

                let { waitForAuthStateChange } = await thisApp.getDbAssembly();
                thisApp.authInfo.user = await waitForAuthStateChange();
                thisApp.authInfo.ready = true;

                let { dbConnection } = await thisApp.getRealtimeDb();
                thisApp.connection.users = [];
                dbConnection(thisApp.connection.name, async (childData) => {
                    //onValue(once)
                    //不知道為甚麼初始讀資料會在add也觸發一次，直接在那邊做
                    thisApp.userConnection(thisApp.authInfo.user);
                }, async (childData) => {
                    //onChildAdded
                    let keyArray = Object.keys(childData);
                    let user = childData[keyArray[0]];
                    user["connectIds"] = keyArray;

                    thisApp.connection.users.push(user)
                    if (!thisApp.connection.ready) { thisApp.connection.ready = true; }
                }, async (childData) => {
                    //onChildRemoved
                    let users = thisApp.connection.users;
                    let keyArray = Object.keys(childData);
                    let user = childData[keyArray[0]];
                    user = thisApp.getObject(users, 'key', user.key)

                    users.splice(users.indexOf(user), 1);
                })
            },
            computed: {
                hasAuth() { return thisApp.authInfo.user != null; },
            },
            methods: {
                resetUserConnection: async function (userInfo, removeId) {
                    let { removeConnection } = await thisApp.getRealtimeDb();

                    removeConnection(thisApp.connection.name, removeId);
                    thisApp.userConnection(userInfo);
                },
                userConnection: async function (userInfo) {
                    let { addConnection, serverTimestamp } = await thisApp.getRealtimeDb();

                    let hasAuth = userInfo != null;
                    let uid = hasAuth ? userInfo.uid : thisApp.visitId;
                    let displayName = hasAuth ? userInfo.displayName : "訪客";

                    let users = thisApp.connection.users;
                    addConnection(thisApp.connection.name, uid, {
                        key: uid,
                        isMember: hasAuth,
                        displayName: displayName,
                        timestamp: serverTimestamp(),
                    }, async (snapshot) => {
                        //onChildAdded
                        //這邊只做連線數增減
                        let connectId = snapshot.key;
                        let childData = snapshot.val();
                        let filterArray = users.filter(x => x.key == childData.key);
                        let user = thisApp.getObject(users, 'key', filterArray[0].key);
                        let hasConnectId = user.connectIds.includes(connectId);

                        if (!hasConnectId) { user.connectIds.push(connectId); }
                    }, async (snapshot) => {
                        //onChildAdded
                        //這邊只做連線數增減
                        let connectId = snapshot.key;
                        let childData = snapshot.val();
                        let filterArray = users.filter(x => x.key == childData.key);
                        let user = thisApp.getObject(users, 'key', filterArray[0].key);
                        let hasConnectId = user.connectIds.includes(connectId);

                        user.connectIds.splice(user.connectIds.indexOf(connectId), 1);
                    });
                },
                signIn: async function () {
                    let { googleSignIn, getAuth } = await thisApp.getDbAssembly();
                    result = await googleSignIn();
                    thisApp.authInfo.user = result.user;

                    thisApp.dbInsert("LoginUser", {
                        email: result.user.email,
                        displayName: result.user.displayName,
                        createDate: new Date(),
                    })
                    thisApp.resetUserConnection(thisApp.authInfo.user, thisApp.visitId);
                },
                signOut: async function () {
                    if (!confirm("是否要登出?")) { return false; }

                    let uid = thisApp.authInfo.user.uid;

                    let { getAuth, signOut } = await thisApp.getDbAssembly();
                    const auth = getAuth();

                    await signOut(auth).then(() => {
                        thisApp.authInfo.user = null;
                    }).catch((error) => {
                        console.log(error)
                    });

                    thisApp.resetUserConnection(null, uid);
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = title + ' - ' + thisApp.Layout.headTitle;
                },
                getObject(list, keyField, key) {
                    let result = null;
                    for (let i = 0; i < list.length; i++) {
                        let data = list[i];
                        if (data[keyField] == key) { result = data; break; }
                    }
                    return result;
                },
            },
            watch: {
            }
        }
    </script>

    <header>
        <div style="display:contents"></div>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">Github重劃區</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/imagecoverframe">圖片框選器</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/dynamicform">動態表單v1.0</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/interest">利息計算機</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/unitywebgl">Unity遊戲</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/aboutme">關於我</a>
                        </li>
                    </ul>

                    <ul class="navbar-nav flex-grow-1" style="justify-content: flex-end">
                        <li class="nav-item me-3 px-2">
                            <div v-if="authInfo.ready">
                                <a v-if="hasAuth" class="nav-link text-dark" @click="signOut()" style="cursor:pointer">{{authInfo.user.displayName}}</a>
                                <a v-if="!hasAuth" class="nav-link text-dark" @click="signIn()" style="cursor:pointer">登入</a>
                            </div>

                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            
<div class="background-video pc-limit">
    <video class="bg-video" autoplay="autoplay" loop="loop" muted="muted" playsinline="playsinline" style=" opacity: 0.8; width: 100vw;">
        <source class="" src="/video/video.mp4" type="video/mp4" />
    </video>
</div>

<div class="background-video mobile-limit">
    <video class="bg-video" autoplay="autoplay" loop="loop" muted="muted" playsinline="playsinline" style=" opacity: 0.8; width: 100vw">
        <source src="/video/pexels-mamunur-rashid-6336968.mp4" type="video/mp4" />
    </video>
</div>

<div class="card card-transparent shadow-sm mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-12">
                <p class="fw-bold fs-5 title-text">網站介紹</p>
                各位好，我叫Tim<br />
                <br />
                網頁內的功能皆為自製，並且使用之套件皆為開放套件(Vue3、vue draggable、Sortable、font-awesome...等)，<br />
                程式範圍涉略Css(元件外觀)、前端(Vue3、Axios、javascript)、後端(MVC頁面產生器)<br />
                、資料庫(由前端直接介接cloud firestore，速度比cloud function快了超過10倍)，<br />
                歡迎有需求者參考學習。<br />
                <br />
                本github靜態頁面的產生方法為自製靜態頁面產生器，使用語言為C#、.Net 6 MVC，程式碼以及說明在<a href="https://github.com/s7514381/s7514381.github.io" target="_blank">s7514381.github.io</a>，功能皆為開放使用。<br />
                使用靜態頁面產生器的好處是，可以沿用MVC的partial概念來產生靜態頁面，減少重複的程式碼。<br />
                <br />
                如果有任何想反饋的歡迎寄信至<a href="mailto:s7514381@gmail.com">s7514381@gmail.com</a>，感謝各位!
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm mb-3 "
     :class="{'placeholder-glow': !connection.ready}">

    <div class="card-header"><p class="fw-bold fs-5 title-text mb-0">聊天大廳</p></div>
    <div class="card-body"
         :class="{'placeholder': !connection.ready}">

        <div class="row">
            <div v-if="!connection.ready" class="col card-loading flex-center ">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>

            <div v-for="v in connection.users" class="col-auto">
                <div class="card card-shadow p-2 anim-fade-in">
                    <div class="d-flex mb-2">
                        <div class="flex-center level-tag me-2" style="background-color: #0da7fd; color: white;">
                            <span>天龍人</span>
                        </div>

                        <span class="title-text">{{v.displayName}}</span>

                    </div>
                    <div class="card p-2" style="box-shadow: inset 1px 1px 2px -1px #ccc;">
                        <div class="d-flex">
                            連線數: <span class="fw-bold">{{v.connectIds.length}}</span>
                        </div>
                        
                    </div>

                </div>
            </div>
        </div>

    </div>
</div>

<div class="card shadow-sm mb-3">
    <div class="card-header"><p class="fw-bold fs-5 title-text mb-0">最近推出項目</p></div>
    <div class="card-body">
        <a class="fw-bold fs-5 title-text" href="/imagecoverframe">圖片框選器</a>
    </div>
</div>
<div class="card shadow-sm mb-3">
    <div class="card-body">
        <a class="fw-bold fs-5 title-text" href="/dynamicform">動態表單</a>
    </div>
</div>
<div class="card shadow-sm mb-3">
    <div class="card-body">
        <a class="fw-bold fs-5 title-text" href="/unitywebgl">遊戲</a>
    </div>
</div>

<script>
    component = {
        mixins: [baseMixin],
        data() {
            return {
                pageTitle: '首頁',
            }
        },
        async created() {

            //axios.get(`https://ithelp.ithome.com.tw/questions/10212812`).then(function (res) {
            //    console.log(res.data)
            //});

            //let signInData = await thisApp.signIn();
            //console.log(signInData)

            //let ins = await thisApp.dbInsert("test", {
            //    first: new Date(),
            //    last: "Lovelace11",
            //    born: 44543
            //})

            //let upd = await thisApp.dbUpdate("test", ins.id, {
            //    born: 6666
            //})

            //let { db, query, collection, where } = await thisApp.getDbAssembly();
            //let list = await thisApp.dbQuery(query(
            //    collection(db, "test")
            //    , where("last", "==", 'Lovelace11')
            //    , where("born", "==", 6666)
            //))
            //list.forEach((doc) => {
            //    console.log(doc.id, " => ", doc.data());
            //});


            //await thisApp.dbDelete("users", ins.id,)
        },
        methods: {
        },
    }
    var formComponent = Vue.createApp(component)
</script>

        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a style="color: #6c757d" href="/Home/UpdateRenderView">更新</a>
        </div>
    </footer>

    <script>
        var vApp = formComponent.mount('#app')
    </script>


</body>
</html>
