@{
    Layout = null;
    string renderController = ViewBag.RenderController;
    string renderAction = ViewBag.RenderAction;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>自由發揮 園丁Tim</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/image-cover-frame.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/dynamic-form.css" asp-append-version="true" />

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="~/lib/Sortable/Sortable.min.js"></script>
    <script src="~/lib/vue/vuedraggable.umd.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/vue-mixin.js" asp-append-version="true"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;

        const baseMixin = {
            mixins: [firestoreMixin, realtimeDbMixin],
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    authInfo: {
                        ready: false,
                        user: null,
                    },
                    visitId: null,
                    connection: {
                        name: 'connections',
                        users: [],
                    },
                }
            },
            beforeCreate() {
                thisApp = this;
            },
            async created() {
                thisApp.visitId = thisApp.newGuid();
                thisApp.setHeadTitle(thisApp.pageTitle)

                let { waitForAuthStateChange } = await thisApp.getDbAssembly();
                thisApp.authInfo.user = await waitForAuthStateChange();
                thisApp.authInfo.ready = true;

                

                let { dbConnection } = await thisApp.getRealtimeDb();
                dbConnection(thisApp.connection.name, async (childData) => {
                    //onValue(once)
                    thisApp.connection.users = [];
                    
                    if (childData) {
                        Object.keys(childData).forEach(function (vUser) {
                            //每一個人
                            let child = childData[vUser];
                            let keyArray = Object.keys(child);//每個連線是一個key
                            let user = child[keyArray[0]]; //每個人至少有一個連線，且都長一樣
                            let connectCount = keyArray.length;
                            user["connectCount"] = connectCount;

                            thisApp.connection.users.push(user)
                        })
                    }
                    //console.log(childData)
                    thisApp.userConnection(thisApp.authInfo.user);
                }, async (childData) => {
                    //onChildAdded

                    let keyArray = Object.keys(childData);
                    let user = childData[keyArray[0]];
                    user["connectCount"] = 1;
                    thisApp.connection.users.push(user);
                }, async (childData) => {
                    //onChildRemoved
                    let keyArray = Object.keys(childData);
                    let user = childData[keyArray[0]];
                    console.log(user)
                    let users = thisApp.connection.users;
                    //users.splice(users.indexOf(originUser), 1);

                    //let filterUsers = users.filter(x => x.key == childData.key);
                    //let hasUser = filterUsers.length != 0;
                    //let originUser = filterUsers[0];

                    //if (hasUser) { users.splice(users.indexOf(originUser), 1); }
                })
                

            },
            computed: {
                hasAuth() { return thisApp.authInfo.user != null; },
            },
            methods: {
                resetUserConnection: async function (userInfo, removeId) {
                    let { removeConnection } = await thisApp.getRealtimeDb();

                    removeConnection(thisApp.connection.name, removeId);
                    thisApp.userConnection(userInfo);
                },
                userConnection: async function (userInfo) {
                    let { addConnection, serverTimestamp } = await thisApp.getRealtimeDb();

                    let hasAuth = userInfo != null;
                    let uid = hasAuth ? userInfo.uid : thisApp.visitId;
                    let displayName = hasAuth ? userInfo.displayName : "訪客";

                    let users = thisApp.connection.users;
                    addConnection(thisApp.connection.name, uid, {
                        key: uid,
                        isMember: hasAuth,
                        displayName: displayName,
                        timestamp: serverTimestamp(),
                    }, async (childData) => {
                        //onChildAdded
                        let filterArray = users.filter(x => x.key == childData.key);
                        let hasData = filterArray.length > 0;
                        //if (!hasData){
                        //    childData["connectCount"] = 1;
                        //    users.push(childData)
                        //}else{
                        //    //let fliter = filterArray[0];
                        //    //let user = users[users.indexOf(fliter)];
                        //    //user.connectCount++;

                        //    let user = thisApp.getObject(users, 'key', childData.key);
                        //    console.log(user)
                        //    //user.connectCount += 10;
                        //}
                    }, async (childData) => {
                        //onChildAdded
                        let filterArray = users.filter(x => x.key == childData.key);
                        let hasData = filterArray.length > 0;
                        //if (hasData) {
                        //    let fliter = filterArray[0];
                        //    let user = users[users.indexOf(fliter)];
                        //    user.connectCount--;

                        //    childData["connectCount"] = 1;
                        //    users.push(childData)
                        //} else {
                        //    let fliter = filterArray[0];
                        //    let user = users[users.indexOf(fliter)];
                        //    user.connectCount++;
                        //}
                    });
                },
                signIn: async function () {
                    let { googleSignIn, getAuth } = await thisApp.getDbAssembly();
                    result = await googleSignIn();
                    thisApp.authInfo.user = result.user;

                    thisApp.dbInsert("LoginUser", {
                        email: result.user.email,
                        displayName: result.user.displayName,
                        createDate: new Date(),
                    })
                    thisApp.resetUserConnection(thisApp.authInfo.user, thisApp.visitId);
                },
                signOut: async function () {
                    if (!confirm("是否要登出?")) { return false; }

                    let uid = thisApp.authInfo.user.uid;

                    let { getAuth, signOut } = await thisApp.getDbAssembly();
                    const auth = getAuth();

                    await signOut(auth).then(() => {
                        thisApp.authInfo.user = null;
                    }).catch((error) => {
                        console.log(error)
                    });

                    thisApp.resetUserConnection(null, uid);
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = title + ' - ' + thisApp.Layout.headTitle;
                },
                getObject(list, keyField, key){
                    let result;
                    for(let i = 0; i< list.length; i++){
                        let data = list[i];
                        if (data[keyField] == key) { result = data; break; }
                    }
                    return result;
                },
            },
            watch: {
            }
        }
    </script>

    <header>
        <div style="display:contents"></div>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">Github重劃區</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" asp-controller="imagecoverframe" asp-action="Index">圖片框選器</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" asp-controller="dynamicform" asp-action="Index">動態表單v1.0</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" asp-controller="interest" asp-action="Index">利息計算機</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" asp-controller="unitywebgl" asp-action="Index">Unity遊戲</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" asp-controller="aboutme" asp-action="Index">關於我</a>
                        </li>
                    </ul>

                    <ul class="navbar-nav flex-grow-1" style="justify-content: flex-end">
                        <li class="nav-item me-3 px-2">
                            <div v-if="authInfo.ready">
                                <a v-if="hasAuth" class="nav-link text-dark" @@click="signOut()" style="cursor:pointer">{{authInfo.user.displayName}}</a>
                                <a v-if="!hasAuth" class="nav-link text-dark" @@click="signIn()" style="cursor:pointer">登入</a>
                            </div>

                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            <partial name="~/Views/@(renderController)/@(renderAction).cshtml" />
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a asp-controller="Home" asp-action="UpdateRenderView" style="color: #6c757d">更新</a>
        </div>
    </footer>

    <script>
        var vApp = formComponent.mount('#app')
    </script>


</body>
</html>
