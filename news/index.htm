
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>自由發揮 園丁Tim</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/css/site.css?v=jaAkdpaYf-nb9iRSS4s59OdGT8MaILIAxhnLVhFcgSM" />
    <link rel="stylesheet" href="/css/image-cover-frame.css?v=LndOvmdvYvfNGZ_Xby9XErY0d5p_LhPwLQ90eOPSTYg" />
    <link rel="stylesheet" href="/css/dynamic-form.css?v=kHNWcsTiItzqiDc_ryxKuhJWXoUb9-TTxkcO2nCvOSU" />

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="/lib/Sortable/Sortable.min.js"></script>
    <script src="/lib/vue/vuedraggable.umd.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="/js/site.js?v=7zy2lQfplQHWIvjyGwWHMPu7byB1vB5atFKLbvzX2Zs"></script>
    <script src="/js/vue-mixin.js?v=60-8lnAHDhQs4zrnv01y_MNen1l1tnXdiqLCDE4wdc4"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;

        const baseMixin = {
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    dbAssembly: {
                        ready: false,
                    },
                    realtimeDb: null,
                    authInfo: {
                        ready: false,
                        user: null,
                    },

                }
            },
            beforeCreate() {
                thisApp = this;
            },
            async created() {
                thisApp.setHeadTitle(thisApp.pageTitle)

                let { waitForAuthStateChange } = await thisApp.getDbAssembly();
                thisApp.authInfo.user = await waitForAuthStateChange();
                thisApp.authInfo.ready = true;

                let { addUserConnection, dbConnection, serverTimestamp } = await thisApp.getRealtimeDb();
                let dbName = "connections";
                //dbConnection(dbName, addFunc = async (childData) => {
                //    //console.log(childData)
                //    //let users = thisApp.chat.users;
                //    //let filterUsers = users.filter(x => x.key == key);
                //    //let hasUser = filterUsers.length != 0;

                //    //if (!hasUser) { users.push(childData); }

                //    //if (!childData.connections) {
                //    //    var originUser = filterUsers[0];

                //    //    if (hasUser) { users.splice(users.indexOf(originUser), 1); }
                //    //}
                //})
                let uid = thisApp.authInfo != null ? thisApp.authInfo.user.uid : thisApp.newGuid();
                addUserConnection(dbName, uid, {
                    key: uid,
                    title: '會員',
                    displayName: thisApp.authInfo.user.displayName,
                    timestamp: serverTimestamp(),
                    connections: true,
                });
            },
            computed: {
                hasAuth() { return thisApp.authInfo.user != null; },
            },
            methods: {
                realtimeDbInit: function () {
                    return new Promise((resolve, reject) => {
                        import("/js/firebase/database.js")
                            .then(module => {
                                resolve(module.exportModel);
                            })
                    });
                },
                firestoreInit: function () {
                    return new Promise((resolve, reject) => {
                        import("/js/firebase/firestore.js")
                            .then(module => {
                                thisApp.dbAssembly = module.dbAssembly;
                                resolve(true);
                            })
                    });
                },
                getRealtimeDb: async function () {
                    if (thisApp.realtimeDb == null) { thisApp.realtimeDb = await thisApp.realtimeDbInit(); }
                    return thisApp.realtimeDb;
                },
                getDbAssembly: async function () {
                    let { ready } = thisApp.dbAssembly;

                    if (!ready) { await thisApp.firestoreInit(); }
                    return thisApp.dbAssembly;
                },
                dbInsert: async function (collectionName, data, docId = '') {
                    let { addDoc, collection, db } = await thisApp.getDbAssembly();

                    if (docId != '') { return await setDoc(doc(db, collectionName, docId), data); }
                    return await addDoc(collection(db, collectionName), data);
                },
                dbUpdate: async function (collectionName, docId, data) {
                    let { doc, updateDoc, db } = await thisApp.getDbAssembly();
                    const docRef = doc(db, collectionName, docId);
                    return await updateDoc(docRef, data);
                },
                dbDelete: async function (collectionName, docId) {
                    let { doc, deleteDoc, db } = await thisApp.getDbAssembly();
                    await deleteDoc(doc(db, collectionName, docId));
                },
                dbQuery: async function (queryCondition) {
                    let { getDocs } = await thisApp.getDbAssembly();
                    return await getDocs(queryCondition);
                },
                signIn: async function () {
                    let { googleSignIn, getAuth } = await thisApp.getDbAssembly();
                    result = await googleSignIn();
                    thisApp.authInfo.user = result.user;

                    thisApp.dbInsert("LoginUser", {
                        email: result.user.email,
                        displayName: result.user.displayName,
                        createDate: new Date(),
                    })
                },
                signOut: async function () {
                    if (!confirm("是否要登出?")) { return false; }

                    let { getAuth, signOut } = await thisApp.getDbAssembly();
                    const auth = getAuth();

                    signOut(auth).then(() => {
                        thisApp.authInfo.user = null;
                    }).catch((error) => {
                        console.log(error)
                    });
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = title + ' - ' + thisApp.Layout.headTitle;
                },
            },
            watch: {
            }
        }
    </script>

    <header>
        <div style="display:contents"></div>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">Github重劃區</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/imagecoverframe">圖片框選器</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/dynamicform">動態表單v1.0</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/interest">利息計算機</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/unitywebgl">Unity遊戲</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/aboutme">關於我</a>
                        </li>
                    </ul>

                    <ul class="navbar-nav flex-grow-1" style="justify-content: flex-end">
                        <li class="nav-item me-3 px-2">
                            <div v-if="authInfo.ready">
                                <a v-if="hasAuth" class="nav-link text-dark" @click="signOut()" style="cursor:pointer">{{authInfo.user.displayName}}</a>
                                <a v-if="!hasAuth" class="nav-link text-dark" @click="signIn()" style="cursor:pointer">登入</a>
                            </div>

                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            
<div class="card shadow-sm mb-3">
    <div class="card-body">

        <div class="form-check form-check-inline">
            <input v-model="tagList" value="1" class="form-check-input" type="checkbox" id="tagCheckbox1">
            <label class="form-check-label" for="tagCheckbox1">標籤1</label>
        </div>
        <div class="form-check form-check-inline">
            <input v-model="tagList" value="2" class="form-check-input" type="checkbox" id="tagCheckbox2">
            <label class="form-check-label" for="tagCheckbox2">標籤2</label>
        </div>
        <div class="form-check form-check-inline">
            <input v-model="tagList" value="3" class="form-check-input" type="checkbox" id="tagCheckbox3">
            <label class="form-check-label" for="tagCheckbox3">標籤3</label>
        </div>

        <div v-for="(v,i) in itemList">
            <div v-show="hasIntersection(v.tag, tagList)"> {{v.name}}</div>
        </div>

    </div>
</div>

<div class="card shadow-sm mb-3">
    <div class="card-body">
        <div class="row row align-items-center">
            <div class="col-sm-2">
                <img src="/image/Manga/manga_0001.jpg" style="max-height: 100px; max-width: 50px;" />
            </div>
            <div class="col-sm-10">
                <div class="row">
                    <p class="mb-0">名稱:安達與島村</p>
                    <p class="mb-0">原文:安達としまむら</p>
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    component = {
        mixins: [baseMixin],
        data() {
            return {
                pageTitle: '連載百合漫畫區',
                tagList:['1'],
                itemList:[
                    {name: "項目1", tag:['1']}
                    , { name: "項目2", tag: ['2']}
                    , { name: "項目3", tag: ['3']}
                    , { name: "項目4", tag: ['1', '3']}
                ]
            }
        },
        created() {

        },
        computed: {
        },
        methods: {
            hasIntersection: function (list1, list2) {
                let bool= false;

                for (let i = 0; i < list1.length; i++){
                    if (list2.includes(list1[i])) { bool = true; break; }
                }
                return bool;
            }
        },
        watch:{
            tagList(nv, ov) {

            },
        }
    }
    var formComponent = Vue.createApp(component)
</script>

        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a style="color: #6c757d" href="/Home/UpdateRenderView">更新</a>
        </div>
    </footer>

    <script>
        var vApp = formComponent.mount('#app')
    </script>


</body>
</html>
