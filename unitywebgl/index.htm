
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>自由發揮 園丁Tim</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="/css/image-cover-frame.css" />
    <link rel="stylesheet" href="/css/dynamic-form.css" />


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3.2.45/dist/vue.global.prod.js" type="text/javascript"></script>
    <script src="/lib/Sortable/Sortable.min.js?v=triwwTQbab50G53J2FyiXb7JlioSKMdmFfzZ1rel42Y"></script>
    <script src="/lib/vue/vuedraggable.umd.min.js?v=Lw1ELK88FKeUDXLNnLnHq0i7DjoaZVc2XqGnomXivjU"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script src="/js/site.js?v=7zy2lQfplQHWIvjyGwWHMPu7byB1vB5atFKLbvzX2Zs"></script>
    <script src="/js/vue-mixin.js?v=60-8lnAHDhQs4zrnv01y_MNen1l1tnXdiqLCDE4wdc4"></script>
</head>

<body id="app">
    <script>
        var thisApp;
        var component;

        const baseMixin = {
            data() {
                return {
                    Layout: {
                        headTitle: document.getElementsByTagName("title")[0].innerHTML,
                    },
                    dbAssembly:{
                        ready: false,
                    },
                    authInfo:{
                        ready: false,
                        user: null,
                    }
                }
            },
            beforeCreate() {
                thisApp = this;
            },
            async created() {
                thisApp.setHeadTitle(thisApp.pageTitle)
 
                if (await thisApp.dbReady()) 
                {
                    let { waitForAuthStateChange, getAuth, signOut } = thisApp.dbAssembly;
                    thisApp.authInfo.user = await waitForAuthStateChange();
                    thisApp.authInfo.ready = true; 
                }  
            },
            computed: {
            },
            methods: {
                dbInit: function (dbAssembly) {
                    this.dbAssembly = dbAssembly
                },
                dbReady:async function() {
                    let { ready } = thisApp.dbAssembly;

                    return new Promise((complete, failed) => {
                        if (ready) { complete(true); }
                        else { 
                            setTimeout(async function () { complete(await thisApp.dbReady()); }, 100)
                        }
                    });
                },
                dbInsert: async function (collectionName, data) {                    
                    let result = null;

                    if (await thisApp.dbReady())  {
                        let { addDoc, collection, db } = thisApp.dbAssembly;

                        result = await addDoc(collection(db, collectionName), data);
                    }
                    return result;
                },
                dbUpdate: async function (collectionName, docId, data) {
                    let result = null;

                    if (await thisApp.dbReady()) {
                        let { doc, updateDoc, db } = thisApp.dbAssembly;

                        const docRef = doc(db, collectionName, docId);
                        result = await updateDoc(docRef, data);
                    }
                    return result;
                },
                dbDelete: async function (collectionName, docId) {
                    if (await thisApp.dbReady()) 
                    {
                        let { doc, deleteDoc, db } = thisApp.dbAssembly;
                        await deleteDoc(doc(db, collectionName, docId));
                    }
                },
                dbQuery: async function (queryCondition) {
                    let result = null;

                    if (await thisApp.dbReady()) 
                    {
                        let { getDocs } = thisApp.dbAssembly;
                        result = await getDocs(queryCondition);
                    }
                    return result;
                },
                signIn: async function(){
                    let result = null;

                    if (await thisApp.dbReady()) 
                    {
                        let { googleSignIn, getAuth } = thisApp.dbAssembly;
                        result = await googleSignIn();
                        thisApp.authInfo.user = result.user;

                        thisApp.dbInsert("LoginUser", {
                            accessToken: result.user.accessToken,
                            email: result.user.email,
                            uid: result.user.uid,
                            displayName: result.user.displayName,
                            createDate: new Date(),
                        })
                    }
                    return result;
                },

                signOut: async function () {
                    if(!confirm("是否要登出?")){ return false; }

                    if (await thisApp.dbReady()) {
                        let { getAuth, signOut } = thisApp.dbAssembly;
                        const auth = getAuth();
                        signOut(auth).then(() => {
                            thisApp.authInfo.user = null;
                        }).catch((error) => {
                            console.log(error)
                        });
                    }
                },
                newGuid: function () {
                    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                    );
                },
                setHeadTitle(title) {
                    if (!title) { return; }
                    document.getElementsByTagName("title")[0].innerHTML = title + ' - ' + thisApp.Layout.headTitle;
                },
            },
            watch:{
            }
        }
    </script>

    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3 px-5 nav-shadow navbar-animation">
            <div class="container-fluid">
                <a class="navbar-brand fw-bold fs-3 logo-text" href="/">Github重劃區</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/imagecoverframe">圖片框選器</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/dynamicform">動態表單v1.0</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/interest">利息計算機</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/unitywebgl">Unity遊戲</a>
                        </li>
                        <li class="nav-item me-3 px-2">
                            <a class="nav-link text-dark" href="/aboutme">關於我</a>
                        </li>
                    </ul>

                    <ul class="navbar-nav flex-grow-1" style="justify-content: flex-end">
                        <li class="nav-item me-3 px-2">
                            <div v-if="authInfo.ready">
                                <a v-if="authInfo.user" class="nav-link text-dark" @click="signOut()" style="cursor:pointer">{{authInfo.user.displayName}}</a>
                                <a v-if="!authInfo.user" class="nav-link text-dark" @click="signIn()" style="cursor:pointer">登入</a>
                            </div>
                            
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container header-margin">
        <main role="main" class="pb-3">
            
<p class="fw-bold fs-5 title-text">遊戲下載</p>
<div class="card shadow-sm mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-12 col-lg-4 d-flex flex-center">
                <a href="/file/unity.zip">練習編寫unity遊戲(尚在製作中)</a>
            </div>
            <div class="col-12 col-lg-8">
                <img src="/image/wdc.jpg" style="max-width: 100%; height: auto;" />
            </div>
        </div>
        
    </div>
</div>


        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - Github - <a style="color: #6c757d" href="/Home/UpdateRenderView">更新</a>
        </div>
    </footer>

    <script src="/js/firestore.js" type="module"></script>

    <script>
        var vApp = formComponent.mount('#app')
    </script>

    <script type="module">
        import { dbAssembly } from "/js/firestore.js";
        vApp.dbInit(dbAssembly);
    </script>


</body>
</html>
